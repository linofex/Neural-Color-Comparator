function performance = selection_NN(input, target)
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 11-May-2018 18:19:52
%
% This script assumes these variables are defined:
%
%   X - input data.
%   lab funct- target data.
input = input';
target = target';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% No Gui
net.trainParam.showWindow = 0;
% Train the Network
[net,tr] = train(net,input,target);

% Test the Network
output = net(input);
%e = gsubtract(input,y);
performance = perform(net,target,output);
%testInd = tr.testInd;
%tstOutputs = output(:,testInd);
%tstTargets = target(:,testInd);
%tstOutputsInd = vec2ind(tstOutputs);
%tstTargetsInd = vec2ind(tstTargets);
%wrongTestClassifications = sum(tstTargetsInd ~= tstOutputsInd);
%percentTestErrors = wrongTestClassifications/(numel(tstTargetsInd));
%performance = percentTestErrors;
% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)
end
